name: Create Executable

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"

jobs:
  create-executable:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install pip
        run: pip install requests

      - name: Check build
        id: check_build
        run: python build-check.py

      - name: Build executable
        id: exe-info
        run: |
          pip install pyinstaller magic-wormhole==${{ steps.check_build.outputs.version }}
          pyinstaller ./launcher.py -F -c --distpath=. --clean --onefile --additional-hooks-dir=hooks --name=wormhole

          $MD5_CHECKSUM=(Get-FileHash ./wormhole.exe -Algorithm MD5).Hash
          $SHA1_CHECKSUM=(Get-FileHash ./wormhole.exe -Algorithm SHA1).Hash
          $SHA256_CHECKSUM=(Get-FileHash ./wormhole.exe -Algorithm SHA256).Hash

          echo "MD5 $MD5_CHECKSUM wormhole.exe" >> wormhole.exe.checksum.txt
          echo "SHA1 $SHA1_CHECKSUM wormhole.exe" >> wormhole.exe.checksum.txt
          echo "SHA256 $SHA256_CHECKSUM wormhole.exe" >> wormhole.exe.checksum.txt
          echo "::set-output name=MD5_CHECKSUM::$MD5_CHECKSUM"
          echo "::set-output name=SHA1_CHECKSUM::$SHA1_CHECKSUM"
          echo "::set-output name=SHA256_CHECKSUM::$SHA256_CHECKSUM"

      - name: Upload executable artifact
        uses: actions/upload-artifact@v2
        with:
          name: wormhole
          path: wormhole.*

      - name: Create release
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check_build.outputs.version }}
          release_name: Release ${{ steps.check_build.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload wormhole executable
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        id: upload-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wormhole.exe
          asset_name: wormhole.exe
          asset_content_type: application/octet-stream

      - name: Upload checksums
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        id: upload-checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wormhole.exe.checksum.txt
          asset_name: wormhole.exe.checksum.txt
          asset_content_type: text/plain

      - name: Chocolatey setup
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        working-directory: magic-wormhole.portable
        env:
          SHA256_CHECKSUM: ${{ steps.exe-info.outputs.SHA256_CHECKSUM }}
        run: |
          (Get-Content ./magic-wormhole.portable.nuspec) |`
            Foreach {$_ -replace '<version>.*</version>','<version>${{ steps.check_build.outputs.version }}</version>'} |`
            Out-File ./magic-wormhole.portable.nuspec

          (Get-Content ./tools/chocolateyinstall.ps1) |`
            Foreach {$_ -replace '^\$checksum = ''''',"`$checksum = '$SHA256_CHECKSUM'"} |`
            Out-File ./tools/chocolateyinstall.ps1
          (Get-Content ./tools/chocolateyinstall.ps1) |`
            Foreach {$_ -replace '^\$url = ''''',"`$url = '${{ steps.upload-exe.outputs.browser_download_url }}'"} |`
            Out-File ./tools/chocolateyinstall.ps1

          (Get-Content ./tools/VERIFICATION.txt) |`
            Foreach {$_ -replace 'x64:','x64: ${{ steps.upload-exe.outputs.browser_download_url }}'} |`
            Out-File ./tools/VERIFICATION.txt
          (Get-Content ./tools/VERIFICATION.txt) |`
            Foreach {$_ -replace 'checksum:',"checksum: $SHA256_CHECKSUM"} |`
            Out-File ./tools/VERIFICATION.txt

      - name: Chocolatey pack
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        working-directory: magic-wormhole.portable
        run: choco pack -v

      - name: Chocolatey push
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        working-directory: magic-wormhole.portable
        run: choco push -v --key=${{ secrets.CHOCOLATEY_API_KEY }}

      - name: Upload chocolatey folder
        if: ${{ steps.check_build.outputs.release_exists == '0' }}
        uses: actions/upload-artifact@v2
        with:
          name: chocolatey
          path: magic-wormhole.portable
